# -*- mode: python -*-

from penchy.jobs import *
from penchy.util import Value
import config

# Only the i386 node
node = NodeSetting('192.168.56.10', 22, 'bench', '/home/bench', '/usr/bin')

benchmarks = ['dummy']

# Client side filters
f = filters.HProfCpuTimes()
send = filters.Send()
unpack_sum = filters.Unpack('sum')
unpack_total = filters.Unpack('total')

comps = []
for bench in benchmarks:
    jvm = jvms.JVM('java')
    jvm.workload = workloads.ScalaBench(bench)
    jvm.tool = tools.HProf('cpu=times')
    comp = SystemComposition(jvm, node)
    comp.flow = [jvm.tool >> f >> ('count', 'values') >> filters.Map(filters.Sum()) >> ('result', 'singleton') >> unpack_sum >> 'sum' >> send,
                 f >> ('total','singleton') >> unpack_total >> 'total' >> send]
    comps.append(comp)

# Server side filters
condense = filters.CondensingReceive(('sum', 'total', 'bench'),
                                     [(com, 'sum', 'total', Value(bench)) for com, bench in zip(comps, benchmarks)])

aggregate = filters.AggregatingReceive('total')
plot = plots.ScatterPlot(filename='/tmp/scatterplot.svg', title='testplot',
                     xlabel='x', ylabel='y')

job = Job(compositions=comps,
          server_flow=[
              condense >> [('bench', 'z'), ('sum', 'x'), ('total', 'y')] >> plot
          ],
          invocations = 1
          )
