#!/usr/bin/env python

import os
import sys
import imp
import logging
from logging.handlers import RotatingFileHandler
from getopt import getopt, GetoptError

from subprocess import Popen, PIPE


log = logging.getLogger('penchy.bootstrap')
formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(name)s: %(message)s')
ch = RotatingFileHandler('penchy_bootstrap.log', backupCount=10)
ch.doRollover()
ch.setFormatter(formatter)
log.addHandler(ch)


def load_penchy(path):
    """
    This loads :class:`penchy.client.Client` from
    a zip file or directory.

    :param path: zip or directory to load from
    :type path: string
    :returns: PenchY client
    :rtype: :class:`penchy.client.Client`
    """
    sys.path.insert(0, os.path.abspath(path))
    from penchy.client import Client
    import penchy
    log.info("Running PenchY %s from %s" % (penchy.__version__, penchy.__file__))
    return Client


def find_penchy_zip(source):
    """
    This will try to find the path to the penchy zip file.

    Raises OSError if the zip cannot be found.

    :param source: source to look for the zip file for
    :type source: string
    :returns: path to zip file
    :rtype: string
    """
    for path in source.split(os.linesep):
        if path.endswith('-py.zip'):
            if os.path.isfile(path):
                return path

    raise OSError("PenchY zip could not be found")


def install_penchy():
    """
    This function will execute maven, install PenchY and return
    maven's output.

    :returns: maven output
    :rtype: string
    """
    log.debug("Installing/updating PenchY using Maven")
    proc2 = Popen(['mvn', '-f', 'bootstrap.pom', 'dependency:build-classpath'],
            stdout=PIPE)
    stdout, _ = proc2.communicate()
    return stdout


def main(args, load_from=False):
    """
    This method starts the bootstrap client. All arguments will be
    passed to the real client.

    A valid bootstrap.pom in the current working directory is
    expected!

    :param args: arguments to pass; this would normally be sys.argv
    :type args: list
    :param load_from: this will load PenchY from this path instead of
                      running it from the maven repository
    :type load_from: string
    """
    log.debug("Executing mvn install:")
    proc = Popen(['mvn', '-f', 'bootstrap.pom', 'install'], stdout=PIPE)
    stdout, _ = proc.communicate()
    log.debug(stdout)

    if load_from:
        Client = load_penchy(load_from)
    else:
        maven_output = install_penchy()
        penchy_zip = find_penchy_zip(maven_output)
        Client = load_penchy(penchy_zip)

    client = Client()
    client.parse_args(args)
    client.run()


if __name__ == "__main__":
    try:
        with open('penchy.pid', 'w') as pidfile:
            pidfile.write(str(os.getpid()))

        args = sys.argv[:]
        if '--load-from' in args:
            load_from = args[args.index('--load-from') + 1]
            args.remove('--load-from')
            args.remove(load_from)
        else:
            load_from = None

        main(args, load_from)
    except Exception, err:
        log.exception('Exception occured while executing PenchY:')
        sys.exit(1)
