# -*- mode: python -*-

import os
from itertools import chain
from penchy.jobs import *
from penchy.jobs.typecheck import Types

node = NodeSetting('localhost', 22, os.environ['USER'], '/tmp', '/usr/bin')

jvm = jvms.JVM('java', '-server')
composition = SystemComposition(jvm, node, name='fop on OpenJVM server')

w = workloads.ScalaBench('fop', iterations=10)
jvm.workload = w

def asses(positive_deviations, negative_deviations):
    return {'negative_deviations_sorted': sorted(negative_deviations),
            'positive_deviations_sorted': sorted(positive_deviations),
            'valid': all(x < 0.2 for x in chain(positive_deviations,
                                             negative_deviations))}

f1 = filters.DacapoHarness()
f2 = filters.StatisticRuntimeEvaluation()
f3 = filters.Evaluation(asses,
                        inputs=Types(('positive_deviations', list, float),
                                     ('negative_deviations', list, float)),
                        outputs=Types(('valid', bool),
                                      ('positive_deviations_sorted', list, float),
                                      ('negative_deviations_sorted', list, float)))
f4 = filters.Print()
composition.flow = [w >> 'stderr' >> f1 >> 'times' >> f2 >> f3 >> f4]

job = Job(compositions=composition,
          server_flow=[],
          invocations = 20)
