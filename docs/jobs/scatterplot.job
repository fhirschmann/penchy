# -*- mode: python -*-

from penchy.jobs import *
import config

node = NodeSetting('192.168.56.10', 22, 'bench', '/home/bench', '/usr/bin')

benchmarks = ['fop', 'batik']

# Client side filters
f = filters.HProfCpuTimes()
send = filters.Send()
unpack_sum = filters.Unpack(input='values', output='sum')
unpack_total = filters.Unpack(input='total', output='total')

compositions = []
for bench in benchmarks:
    jvm = jvms.JVM('java')
    jvm.workload = workloads.ScalaBench(bench)
    jvm.tool = tools.HProf('cpu=times')
    composition = SystemComposition(jvm, node)
    composition.flow = [jvm.tool >> f >> ('count', 'values') >>
                        filters.Map(filters.Sum()) >>
                        unpack_sum >> send,
                        f >> 'total' >> unpack_total >> send]
    compositions.append(composition)

# Server side filters
merge = filters.MergingReceive(('sum', 'total', 'bench'),
                               [(composition, 'sum', 'total', Value(bench))
                                for composition, bench in zip(compositions,
                                                              benchmarks)])

plot = plots.ScatterPlot(filename='/tmp/scatterplot.svg',
                         title='Scatterplot',
                         xlabel='Sum of method calls',
                         ylabel='Total execution time')

job = Job(compositions=compositions,
          server_flow=[
              merge >> [('bench', 'labels'), ('sum', 'x'), ('total', 'y')] >> plot
          ],
          invocations = 1)
